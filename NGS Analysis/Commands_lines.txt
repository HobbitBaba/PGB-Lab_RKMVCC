extract_splice_sites.py sam.gff >mango.ss
extract_exons.py sam.gff >mango.exon

hisat2-build -p 16 --exon genome.exon --ss genome.ss genome.fa genome_tran
hisat2-build -p 16 genome.fa genome
hisat2 -p 8 --dta --summary-file --new-summary -x mango_index -1 SRR17635109_forward_R1_paired.fastqsanger.gz -2 SRR17635109_reverse_R2_paired.fastqsanger.gz -S SRR17635109.sam

samtools view -bS eg2.sam > eg2.bam

samtools sort eg2.bam -o eg2.sorted.bam

stringtie -p 8 -G mango_TA4_gene_models.gff -o SRR17635108.gtf SRR17635108_sorted.bam -f 0.01 -m 200 -a 10 -j 1 -c 1 -g 50 -M 1.0 (mango)

stringtie -p 4 -G human-chr19_P.gff -b(?) -o long_reads_guided.out.gtf long_reads.bam -f 0.01 -m 200 -a 10 -j 1 -c 1 -g 50 -M 1.0

*.gtf > mergelist.txt

stringtie --merge -p 8 -G mango_TA4_gene_models.gff -o stringtie_merged.gtf mergelist.txt -m 50 -c 0 -F 1.0 -T 1.0 -f 0.01 -g 250

stringtie -p 8 -G mango_TA4_gene_models.gff -e -o ref_annotation.gtf SRR17635107.bam -f 0.01 -m 200 -a 10 -j 1 -c 1 -g 50 -M 1.0 (reff trancriptome only)

String Tie feature count

Using StringTie with DESeq2 and edgeR

DESeq2 and edgeR are two popular Bioconductor packages for analyzing differential expression, which take as input a matrix of read counts mapped to particular genomic features (e.g., genes). We provide a Python script (prepDE.py, or the Python 3 version: prepDE.py3 ) that can be used to extract this read count information directly from the files generated by StringTie (run with the -e parameter).

prepDE.py derives hypothetical read counts for each transcript from the coverage values estimated by StringTie for each transcript, by using this simple formula: reads_per_transcript = coverage * transcript_len / read_len
There are two ways to provide input to the prepDE.py script:

one option is to provide a path to a directory containing all sample sub-directories, with the same structure as the ballgown directory in the StringTie protocol paper in preparation for Ballgown. By default (no -i option), the script is going to look in the current directory for all sub-directories having .gtf files in them, as in this example:
    ./sample1/sample1.gtf
    ./sample2/sample2.gtf
    ./sample3/sample3.gtf
   
Alternatively, one can provide a text file listing sample IDs and their respective paths (sample_lst.txt).
Usage: prepDE.py [options]
generates two CSV files containing the count matrices for genes and transcripts, using the coverage values found in the output of stringtie -e

Options:
-h, 		--help		show this help message and exit
-i 	INPUT, 	--input=INPUT, --in=INPUT	a folder containing all sample sub-directories, or a text file with sample ID and path to its GTF file on each line [default: . ]
-g 	G		where to output the gene count matrix [default: gene_count_matrix.csv]
-t 	T		where to output the transcript count matrix [default: transcript_count_matrix.csv]
-l 	LENGTH, 	--length=LENGTH	the average read length [default: 75]
-p 	PATTERN, 	--pattern=PATTERN	a regular expression that selects the sample subdirectories
-c, 	--cluster	whether to cluster genes that overlap with different gene IDs, ignoring ones with geneID pattern (see below)
-s 	STRING, --string=STRING		if a different prefix is used for geneIDs assigned by StringTie [default: MSTRG]
-k KEY, --key=KEY	if clustering, what prefix to use for geneIDs assigned by this script [default: prepG]
--legend=LEGEND	if clustering, where to output the legend file mapping transcripts to assigned geneIDs [default: legend.csv]

These count matrices (CSV files) can then be imported into R for use by DESeq2 and edgeR (using the DESeqDataSetFromMatrix and DGEList functions, respectively).
